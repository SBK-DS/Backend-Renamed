# # Python to Linux Web App on Azure
# # Build your Python project and deploy it to Azure as a Linux Web App.
# # Change python version to one thats appropriate for your application.
# # https://docs.microsoft.com/azure/devops/pipelines/languages/python

# trigger:
# - main

# variables:
#   # Azure Resource Manager connection created during pipeline creation
#   azureServiceConnectionId: 'e22dacc7-cd81-4a81-a6e8-71cfcc0e4d70'

#   # Web app name
#   webAppName: 'SBK-Django'

#   # Agent VM image name
#   vmImageName: 'ubuntu-latest'

#   # Environment name
#   environmentName: 'SBK-Django'

#   # Project root folder. Point to the folder containing manage.py file.
#   projectRoot: $(System.DefaultWorkingDirectory)

#   # Python version: 3.7
#   pythonVersion: '3.7'

# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(pythonVersion)'
#       displayName: 'Use Python $(pythonVersion)'

#     - script: |
#         python -m venv antenv
#         source antenv/bin/activate
#         python -m pip install --upgrade pip
#         pip install setup
#         pip install -r requirements.txt
#       workingDirectory: $(projectRoot)
#       displayName: "Install requirements"

#     - task: ArchiveFiles@2
#       displayName: 'Archive files'
#       inputs:
#         rootFolderOrFile: '$(projectRoot)'
#         includeRootFolder: false
#         archiveType: zip
#         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         replaceExistingArchive: true

#     - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#       displayName: 'Upload package'
#       artifact: drop

# - stage: Deploy
#   displayName: 'Deploy Web App'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: $(environmentName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : SBK-Django'
#             inputs:
#               azureSubscription: $(azureServiceConnectionId)
#               appName: $(webAppName)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.9'  # Adjust the Python version as needed

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
    addToPath: true

- script: |
    python -m venv venv
    source venv/bin/activate
    python -m pip install --upgrade pip
    pip install -r Backend/requirements.txt
    pip install pytest pytest-django pytest-cov
  displayName: 'Install dependencies'

- script: |
    source venv/bin/activate
    export DJANGO_SETTINGS_MODULE=healthcare.settings
    mkdir -p Backend/test-results
    pytest --junitxml=Backend/test-results/results.xml Backend/records/tests.py
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testRunner: 'JUnit'
    testResultsFiles: 'Backend/test-results/results.xml'
    mergeTestResults: true
  displayName: 'Publish Test Results'

- script: |
    source venv/bin/activate
    export DJANGO_SETTINGS_MODULE=healthcare.settings
    python Backend/manage.py collectstatic --noinput
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Collect static files'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'
